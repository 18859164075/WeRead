package cn.read.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.read.bean.ChatLog;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHAT_LOG".
*/
public class ChatLogDao extends AbstractDao<ChatLog, String> {

    public static final String TABLENAME = "CHAT_LOG";

    /**
     * Properties of entity ChatLog.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ChatLogId = new Property(0, String.class, "chatLogId", true, "CHAT_LOG_ID");
        public final static Property Type = new Property(1, int.class, "type", false, "TYPE");
        public final static Property Content = new Property(2, String.class, "content", false, "CONTENT");
        public final static Property CreateBy = new Property(3, String.class, "createBy", false, "CREATE_BY");
        public final static Property CreateDate = new Property(4, java.util.Date.class, "createDate", false, "CREATE_DATE");
    };


    public ChatLogDao(DaoConfig config) {
        super(config);
    }
    
    public ChatLogDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHAT_LOG\" (" + //
                "\"CHAT_LOG_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: chatLogId
                "\"TYPE\" INTEGER NOT NULL ," + // 1: type
                "\"CONTENT\" TEXT NOT NULL ," + // 2: content
                "\"CREATE_BY\" TEXT NOT NULL ," + // 3: createBy
                "\"CREATE_DATE\" INTEGER NOT NULL );"); // 4: createDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHAT_LOG\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ChatLog entity) {
        stmt.clearBindings();
 
        String chatLogId = entity.getChatLogId();
        if (chatLogId != null) {
            stmt.bindString(1, chatLogId);
        }
        stmt.bindLong(2, entity.getType());
        stmt.bindString(3, entity.getContent());
        stmt.bindString(4, entity.getCreateBy());
        stmt.bindLong(5, entity.getCreateDate().getTime());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ChatLog entity) {
        stmt.clearBindings();
 
        String chatLogId = entity.getChatLogId();
        if (chatLogId != null) {
            stmt.bindString(1, chatLogId);
        }
        stmt.bindLong(2, entity.getType());
        stmt.bindString(3, entity.getContent());
        stmt.bindString(4, entity.getCreateBy());
        stmt.bindLong(5, entity.getCreateDate().getTime());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public ChatLog readEntity(Cursor cursor, int offset) {
        ChatLog entity = new ChatLog( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // chatLogId
            cursor.getInt(offset + 1), // type
            cursor.getString(offset + 2), // content
            cursor.getString(offset + 3), // createBy
            new java.util.Date(cursor.getLong(offset + 4)) // createDate
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ChatLog entity, int offset) {
        entity.setChatLogId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setType(cursor.getInt(offset + 1));
        entity.setContent(cursor.getString(offset + 2));
        entity.setCreateBy(cursor.getString(offset + 3));
        entity.setCreateDate(new java.util.Date(cursor.getLong(offset + 4)));
     }
    
    @Override
    protected final String updateKeyAfterInsert(ChatLog entity, long rowId) {
        return entity.getChatLogId();
    }
    
    @Override
    public String getKey(ChatLog entity) {
        if(entity != null) {
            return entity.getChatLogId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
