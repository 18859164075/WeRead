package cn.read.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.read.bean.VideosSummary;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "VIDEOS_SUMMARY".
*/
public class VideosSummaryDao extends AbstractDao<VideosSummary, String> {

    public static final String TABLENAME = "VIDEOS_SUMMARY";

    /**
     * Properties of entity VideosSummary.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property TopicImg = new Property(0, String.class, "topicImg", false, "TOPIC_IMG");
        public final static Property Videosource = new Property(1, String.class, "videosource", false, "VIDEOSOURCE");
        public final static Property Mp4Hd_url = new Property(2, String.class, "mp4Hd_url", false, "MP4_HD_URL");
        public final static Property TopicDesc = new Property(3, String.class, "topicDesc", false, "TOPIC_DESC");
        public final static Property TopicSid = new Property(4, String.class, "topicSid", false, "TOPIC_SID");
        public final static Property Cover = new Property(5, String.class, "cover", false, "COVER");
        public final static Property Title = new Property(6, String.class, "title", false, "TITLE");
        public final static Property PlayCount = new Property(7, int.class, "playCount", false, "PLAY_COUNT");
        public final static Property ReplyBoard = new Property(8, String.class, "replyBoard", false, "REPLY_BOARD");
        public final static Property Sectiontitle = new Property(9, String.class, "sectiontitle", false, "SECTIONTITLE");
        public final static Property Replyid = new Property(10, String.class, "replyid", false, "REPLYID");
        public final static Property Description = new Property(11, String.class, "description", false, "DESCRIPTION");
        public final static Property Mp4_url = new Property(12, String.class, "mp4_url", true, "MP4_URL");
        public final static Property Length = new Property(13, int.class, "length", false, "LENGTH");
        public final static Property Playersize = new Property(14, int.class, "playersize", false, "PLAYERSIZE");
        public final static Property M3u8Hd_url = new Property(15, String.class, "m3u8Hd_url", false, "M3U8_HD_URL");
        public final static Property Vid = new Property(16, String.class, "vid", false, "VID");
        public final static Property M3u8_url = new Property(17, String.class, "m3u8_url", false, "M3U8_URL");
        public final static Property Ptime = new Property(18, String.class, "ptime", false, "PTIME");
        public final static Property TopicName = new Property(19, String.class, "topicName", false, "TOPIC_NAME");
        public final static Property IsFavorites = new Property(20, boolean.class, "isFavorites", false, "IS_FAVORITES");
    };


    public VideosSummaryDao(DaoConfig config) {
        super(config);
    }
    
    public VideosSummaryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"VIDEOS_SUMMARY\" (" + //
                "\"TOPIC_IMG\" TEXT," + // 0: topicImg
                "\"VIDEOSOURCE\" TEXT," + // 1: videosource
                "\"MP4_HD_URL\" TEXT," + // 2: mp4Hd_url
                "\"TOPIC_DESC\" TEXT," + // 3: topicDesc
                "\"TOPIC_SID\" TEXT," + // 4: topicSid
                "\"COVER\" TEXT," + // 5: cover
                "\"TITLE\" TEXT," + // 6: title
                "\"PLAY_COUNT\" INTEGER NOT NULL ," + // 7: playCount
                "\"REPLY_BOARD\" TEXT," + // 8: replyBoard
                "\"SECTIONTITLE\" TEXT," + // 9: sectiontitle
                "\"REPLYID\" TEXT," + // 10: replyid
                "\"DESCRIPTION\" TEXT," + // 11: description
                "\"MP4_URL\" TEXT PRIMARY KEY NOT NULL ," + // 12: mp4_url
                "\"LENGTH\" INTEGER NOT NULL ," + // 13: length
                "\"PLAYERSIZE\" INTEGER NOT NULL ," + // 14: playersize
                "\"M3U8_HD_URL\" TEXT," + // 15: m3u8Hd_url
                "\"VID\" TEXT," + // 16: vid
                "\"M3U8_URL\" TEXT," + // 17: m3u8_url
                "\"PTIME\" TEXT," + // 18: ptime
                "\"TOPIC_NAME\" TEXT," + // 19: topicName
                "\"IS_FAVORITES\" INTEGER NOT NULL );"); // 20: isFavorites
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"VIDEOS_SUMMARY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, VideosSummary entity) {
        stmt.clearBindings();
 
        String topicImg = entity.getTopicImg();
        if (topicImg != null) {
            stmt.bindString(1, topicImg);
        }
 
        String videosource = entity.getVideosource();
        if (videosource != null) {
            stmt.bindString(2, videosource);
        }
 
        String mp4Hd_url = entity.getMp4Hd_url();
        if (mp4Hd_url != null) {
            stmt.bindString(3, mp4Hd_url);
        }
 
        String topicDesc = entity.getTopicDesc();
        if (topicDesc != null) {
            stmt.bindString(4, topicDesc);
        }
 
        String topicSid = entity.getTopicSid();
        if (topicSid != null) {
            stmt.bindString(5, topicSid);
        }
 
        String cover = entity.getCover();
        if (cover != null) {
            stmt.bindString(6, cover);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(7, title);
        }
        stmt.bindLong(8, entity.getPlayCount());
 
        String replyBoard = entity.getReplyBoard();
        if (replyBoard != null) {
            stmt.bindString(9, replyBoard);
        }
 
        String sectiontitle = entity.getSectiontitle();
        if (sectiontitle != null) {
            stmt.bindString(10, sectiontitle);
        }
 
        String replyid = entity.getReplyid();
        if (replyid != null) {
            stmt.bindString(11, replyid);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(12, description);
        }
 
        String mp4_url = entity.getMp4_url();
        if (mp4_url != null) {
            stmt.bindString(13, mp4_url);
        }
        stmt.bindLong(14, entity.getLength());
        stmt.bindLong(15, entity.getPlayersize());
 
        String m3u8Hd_url = entity.getM3u8Hd_url();
        if (m3u8Hd_url != null) {
            stmt.bindString(16, m3u8Hd_url);
        }
 
        String vid = entity.getVid();
        if (vid != null) {
            stmt.bindString(17, vid);
        }
 
        String m3u8_url = entity.getM3u8_url();
        if (m3u8_url != null) {
            stmt.bindString(18, m3u8_url);
        }
 
        String ptime = entity.getPtime();
        if (ptime != null) {
            stmt.bindString(19, ptime);
        }
 
        String topicName = entity.getTopicName();
        if (topicName != null) {
            stmt.bindString(20, topicName);
        }
        stmt.bindLong(21, entity.getIsFavorites() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, VideosSummary entity) {
        stmt.clearBindings();
 
        String topicImg = entity.getTopicImg();
        if (topicImg != null) {
            stmt.bindString(1, topicImg);
        }
 
        String videosource = entity.getVideosource();
        if (videosource != null) {
            stmt.bindString(2, videosource);
        }
 
        String mp4Hd_url = entity.getMp4Hd_url();
        if (mp4Hd_url != null) {
            stmt.bindString(3, mp4Hd_url);
        }
 
        String topicDesc = entity.getTopicDesc();
        if (topicDesc != null) {
            stmt.bindString(4, topicDesc);
        }
 
        String topicSid = entity.getTopicSid();
        if (topicSid != null) {
            stmt.bindString(5, topicSid);
        }
 
        String cover = entity.getCover();
        if (cover != null) {
            stmt.bindString(6, cover);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(7, title);
        }
        stmt.bindLong(8, entity.getPlayCount());
 
        String replyBoard = entity.getReplyBoard();
        if (replyBoard != null) {
            stmt.bindString(9, replyBoard);
        }
 
        String sectiontitle = entity.getSectiontitle();
        if (sectiontitle != null) {
            stmt.bindString(10, sectiontitle);
        }
 
        String replyid = entity.getReplyid();
        if (replyid != null) {
            stmt.bindString(11, replyid);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(12, description);
        }
 
        String mp4_url = entity.getMp4_url();
        if (mp4_url != null) {
            stmt.bindString(13, mp4_url);
        }
        stmt.bindLong(14, entity.getLength());
        stmt.bindLong(15, entity.getPlayersize());
 
        String m3u8Hd_url = entity.getM3u8Hd_url();
        if (m3u8Hd_url != null) {
            stmt.bindString(16, m3u8Hd_url);
        }
 
        String vid = entity.getVid();
        if (vid != null) {
            stmt.bindString(17, vid);
        }
 
        String m3u8_url = entity.getM3u8_url();
        if (m3u8_url != null) {
            stmt.bindString(18, m3u8_url);
        }
 
        String ptime = entity.getPtime();
        if (ptime != null) {
            stmt.bindString(19, ptime);
        }
 
        String topicName = entity.getTopicName();
        if (topicName != null) {
            stmt.bindString(20, topicName);
        }
        stmt.bindLong(21, entity.getIsFavorites() ? 1L: 0L);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12);
    }    

    @Override
    public VideosSummary readEntity(Cursor cursor, int offset) {
        VideosSummary entity = new VideosSummary( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // topicImg
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // videosource
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // mp4Hd_url
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // topicDesc
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // topicSid
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // cover
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // title
            cursor.getInt(offset + 7), // playCount
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // replyBoard
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // sectiontitle
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // replyid
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // description
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // mp4_url
            cursor.getInt(offset + 13), // length
            cursor.getInt(offset + 14), // playersize
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // m3u8Hd_url
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // vid
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // m3u8_url
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // ptime
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // topicName
            cursor.getShort(offset + 20) != 0 // isFavorites
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, VideosSummary entity, int offset) {
        entity.setTopicImg(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setVideosource(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMp4Hd_url(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTopicDesc(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTopicSid(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCover(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTitle(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPlayCount(cursor.getInt(offset + 7));
        entity.setReplyBoard(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSectiontitle(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setReplyid(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setDescription(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setMp4_url(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setLength(cursor.getInt(offset + 13));
        entity.setPlayersize(cursor.getInt(offset + 14));
        entity.setM3u8Hd_url(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setVid(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setM3u8_url(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setPtime(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setTopicName(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setIsFavorites(cursor.getShort(offset + 20) != 0);
     }
    
    @Override
    protected final String updateKeyAfterInsert(VideosSummary entity, long rowId) {
        return entity.getMp4_url();
    }
    
    @Override
    public String getKey(VideosSummary entity) {
        if(entity != null) {
            return entity.getMp4_url();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
