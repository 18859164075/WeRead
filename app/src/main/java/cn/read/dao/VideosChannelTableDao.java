package cn.read.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.read.bean.VideosChannelTable;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "VIDEOS_CHANNEL_TABLE".
*/
public class VideosChannelTableDao extends AbstractDao<VideosChannelTable, String> {

    public static final String TABLENAME = "VIDEOS_CHANNEL_TABLE";

    /**
     * Properties of entity VideosChannelTable.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property TableId = new Property(0, String.class, "tableId", true, "TABLE_ID");
        public final static Property VideosChannelName = new Property(1, String.class, "videosChannelName", false, "VIDEOS_CHANNEL_NAME");
        public final static Property VideosChannelId = new Property(2, String.class, "videosChannelId", false, "VIDEOS_CHANNEL_ID");
        public final static Property VideosChannelType = new Property(3, String.class, "videosChannelType", false, "VIDEOS_CHANNEL_TYPE");
        public final static Property VideosChannelSelect = new Property(4, boolean.class, "videosChannelSelect", false, "VIDEOS_CHANNEL_SELECT");
        public final static Property VideosChannelIndex = new Property(5, int.class, "videosChannelIndex", false, "VIDEOS_CHANNEL_INDEX");
        public final static Property VideosChannelFixed = new Property(6, Boolean.class, "videosChannelFixed", false, "VIDEOS_CHANNEL_FIXED");
    };


    public VideosChannelTableDao(DaoConfig config) {
        super(config);
    }
    
    public VideosChannelTableDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"VIDEOS_CHANNEL_TABLE\" (" + //
                "\"TABLE_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: tableId
                "\"VIDEOS_CHANNEL_NAME\" TEXT NOT NULL ," + // 1: videosChannelName
                "\"VIDEOS_CHANNEL_ID\" TEXT NOT NULL ," + // 2: videosChannelId
                "\"VIDEOS_CHANNEL_TYPE\" TEXT NOT NULL ," + // 3: videosChannelType
                "\"VIDEOS_CHANNEL_SELECT\" INTEGER NOT NULL ," + // 4: videosChannelSelect
                "\"VIDEOS_CHANNEL_INDEX\" INTEGER NOT NULL ," + // 5: videosChannelIndex
                "\"VIDEOS_CHANNEL_FIXED\" INTEGER);"); // 6: videosChannelFixed
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"VIDEOS_CHANNEL_TABLE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, VideosChannelTable entity) {
        stmt.clearBindings();
 
        String tableId = entity.getTableId();
        if (tableId != null) {
            stmt.bindString(1, tableId);
        }
        stmt.bindString(2, entity.getVideosChannelName());
        stmt.bindString(3, entity.getVideosChannelId());
        stmt.bindString(4, entity.getVideosChannelType());
        stmt.bindLong(5, entity.getVideosChannelSelect() ? 1L: 0L);
        stmt.bindLong(6, entity.getVideosChannelIndex());
 
        Boolean videosChannelFixed = entity.getVideosChannelFixed();
        if (videosChannelFixed != null) {
            stmt.bindLong(7, videosChannelFixed ? 1L: 0L);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, VideosChannelTable entity) {
        stmt.clearBindings();
 
        String tableId = entity.getTableId();
        if (tableId != null) {
            stmt.bindString(1, tableId);
        }
        stmt.bindString(2, entity.getVideosChannelName());
        stmt.bindString(3, entity.getVideosChannelId());
        stmt.bindString(4, entity.getVideosChannelType());
        stmt.bindLong(5, entity.getVideosChannelSelect() ? 1L: 0L);
        stmt.bindLong(6, entity.getVideosChannelIndex());
 
        Boolean videosChannelFixed = entity.getVideosChannelFixed();
        if (videosChannelFixed != null) {
            stmt.bindLong(7, videosChannelFixed ? 1L: 0L);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public VideosChannelTable readEntity(Cursor cursor, int offset) {
        VideosChannelTable entity = new VideosChannelTable( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // tableId
            cursor.getString(offset + 1), // videosChannelName
            cursor.getString(offset + 2), // videosChannelId
            cursor.getString(offset + 3), // videosChannelType
            cursor.getShort(offset + 4) != 0, // videosChannelSelect
            cursor.getInt(offset + 5), // videosChannelIndex
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0 // videosChannelFixed
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, VideosChannelTable entity, int offset) {
        entity.setTableId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setVideosChannelName(cursor.getString(offset + 1));
        entity.setVideosChannelId(cursor.getString(offset + 2));
        entity.setVideosChannelType(cursor.getString(offset + 3));
        entity.setVideosChannelSelect(cursor.getShort(offset + 4) != 0);
        entity.setVideosChannelIndex(cursor.getInt(offset + 5));
        entity.setVideosChannelFixed(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
     }
    
    @Override
    protected final String updateKeyAfterInsert(VideosChannelTable entity, long rowId) {
        return entity.getTableId();
    }
    
    @Override
    public String getKey(VideosChannelTable entity) {
        if(entity != null) {
            return entity.getTableId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
