package cn.read.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.read.bean.NewsSummary;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NEWS_SUMMARY".
*/
public class NewsSummaryDao extends AbstractDao<NewsSummary, String> {

    public static final String TABLENAME = "NEWS_SUMMARY";

    /**
     * Properties of entity NewsSummary.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Postid = new Property(0, String.class, "postid", true, "POSTID");
        public final static Property HasCover = new Property(1, boolean.class, "hasCover", false, "HAS_COVER");
        public final static Property HasHead = new Property(2, int.class, "hasHead", false, "HAS_HEAD");
        public final static Property ReplyCount = new Property(3, int.class, "replyCount", false, "REPLY_COUNT");
        public final static Property HasImg = new Property(4, int.class, "hasImg", false, "HAS_IMG");
        public final static Property Digest = new Property(5, String.class, "digest", false, "DIGEST");
        public final static Property HasIcon = new Property(6, boolean.class, "hasIcon", false, "HAS_ICON");
        public final static Property Docid = new Property(7, String.class, "docid", false, "DOCID");
        public final static Property Title = new Property(8, String.class, "title", false, "TITLE");
        public final static Property Ltitle = new Property(9, String.class, "ltitle", false, "LTITLE");
        public final static Property Order = new Property(10, int.class, "order", false, "ORDER");
        public final static Property Priority = new Property(11, int.class, "priority", false, "PRIORITY");
        public final static Property Lmodify = new Property(12, String.class, "lmodify", false, "LMODIFY");
        public final static Property Boardid = new Property(13, String.class, "boardid", false, "BOARDID");
        public final static Property PhotosetID = new Property(14, String.class, "photosetID", false, "PHOTOSET_ID");
        public final static Property Template = new Property(15, String.class, "template", false, "TEMPLATE");
        public final static Property Votecount = new Property(16, int.class, "votecount", false, "VOTECOUNT");
        public final static Property SkipID = new Property(17, String.class, "skipID", false, "SKIP_ID");
        public final static Property Alias = new Property(18, String.class, "alias", false, "ALIAS");
        public final static Property SkipType = new Property(19, String.class, "skipType", false, "SKIP_TYPE");
        public final static Property Cid = new Property(20, String.class, "cid", false, "CID");
        public final static Property HasAD = new Property(21, int.class, "hasAD", false, "HAS_AD");
        public final static Property Source = new Property(22, String.class, "source", false, "SOURCE");
        public final static Property Ename = new Property(23, String.class, "ename", false, "ENAME");
        public final static Property Imgsrc = new Property(24, String.class, "imgsrc", false, "IMGSRC");
        public final static Property Tname = new Property(25, String.class, "tname", false, "TNAME");
        public final static Property Ptime = new Property(26, String.class, "ptime", false, "PTIME");
        public final static Property IsFavorites = new Property(27, boolean.class, "isFavorites", false, "IS_FAVORITES");
    };


    public NewsSummaryDao(DaoConfig config) {
        super(config);
    }
    
    public NewsSummaryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NEWS_SUMMARY\" (" + //
                "\"POSTID\" TEXT PRIMARY KEY NOT NULL ," + // 0: postid
                "\"HAS_COVER\" INTEGER NOT NULL ," + // 1: hasCover
                "\"HAS_HEAD\" INTEGER NOT NULL ," + // 2: hasHead
                "\"REPLY_COUNT\" INTEGER NOT NULL ," + // 3: replyCount
                "\"HAS_IMG\" INTEGER NOT NULL ," + // 4: hasImg
                "\"DIGEST\" TEXT," + // 5: digest
                "\"HAS_ICON\" INTEGER NOT NULL ," + // 6: hasIcon
                "\"DOCID\" TEXT," + // 7: docid
                "\"TITLE\" TEXT," + // 8: title
                "\"LTITLE\" TEXT," + // 9: ltitle
                "\"ORDER\" INTEGER NOT NULL ," + // 10: order
                "\"PRIORITY\" INTEGER NOT NULL ," + // 11: priority
                "\"LMODIFY\" TEXT," + // 12: lmodify
                "\"BOARDID\" TEXT," + // 13: boardid
                "\"PHOTOSET_ID\" TEXT," + // 14: photosetID
                "\"TEMPLATE\" TEXT," + // 15: template
                "\"VOTECOUNT\" INTEGER NOT NULL ," + // 16: votecount
                "\"SKIP_ID\" TEXT," + // 17: skipID
                "\"ALIAS\" TEXT," + // 18: alias
                "\"SKIP_TYPE\" TEXT," + // 19: skipType
                "\"CID\" TEXT," + // 20: cid
                "\"HAS_AD\" INTEGER NOT NULL ," + // 21: hasAD
                "\"SOURCE\" TEXT," + // 22: source
                "\"ENAME\" TEXT," + // 23: ename
                "\"IMGSRC\" TEXT," + // 24: imgsrc
                "\"TNAME\" TEXT," + // 25: tname
                "\"PTIME\" TEXT," + // 26: ptime
                "\"IS_FAVORITES\" INTEGER NOT NULL );"); // 27: isFavorites
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NEWS_SUMMARY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, NewsSummary entity) {
        stmt.clearBindings();
 
        String postid = entity.getPostid();
        if (postid != null) {
            stmt.bindString(1, postid);
        }
        stmt.bindLong(2, entity.getHasCover() ? 1L: 0L);
        stmt.bindLong(3, entity.getHasHead());
        stmt.bindLong(4, entity.getReplyCount());
        stmt.bindLong(5, entity.getHasImg());
 
        String digest = entity.getDigest();
        if (digest != null) {
            stmt.bindString(6, digest);
        }
        stmt.bindLong(7, entity.getHasIcon() ? 1L: 0L);
 
        String docid = entity.getDocid();
        if (docid != null) {
            stmt.bindString(8, docid);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(9, title);
        }
 
        String ltitle = entity.getLtitle();
        if (ltitle != null) {
            stmt.bindString(10, ltitle);
        }
        stmt.bindLong(11, entity.getOrder());
        stmt.bindLong(12, entity.getPriority());
 
        String lmodify = entity.getLmodify();
        if (lmodify != null) {
            stmt.bindString(13, lmodify);
        }
 
        String boardid = entity.getBoardid();
        if (boardid != null) {
            stmt.bindString(14, boardid);
        }
 
        String photosetID = entity.getPhotosetID();
        if (photosetID != null) {
            stmt.bindString(15, photosetID);
        }
 
        String template = entity.getTemplate();
        if (template != null) {
            stmt.bindString(16, template);
        }
        stmt.bindLong(17, entity.getVotecount());
 
        String skipID = entity.getSkipID();
        if (skipID != null) {
            stmt.bindString(18, skipID);
        }
 
        String alias = entity.getAlias();
        if (alias != null) {
            stmt.bindString(19, alias);
        }
 
        String skipType = entity.getSkipType();
        if (skipType != null) {
            stmt.bindString(20, skipType);
        }
 
        String cid = entity.getCid();
        if (cid != null) {
            stmt.bindString(21, cid);
        }
        stmt.bindLong(22, entity.getHasAD());
 
        String source = entity.getSource();
        if (source != null) {
            stmt.bindString(23, source);
        }
 
        String ename = entity.getEname();
        if (ename != null) {
            stmt.bindString(24, ename);
        }
 
        String imgsrc = entity.getImgsrc();
        if (imgsrc != null) {
            stmt.bindString(25, imgsrc);
        }
 
        String tname = entity.getTname();
        if (tname != null) {
            stmt.bindString(26, tname);
        }
 
        String ptime = entity.getPtime();
        if (ptime != null) {
            stmt.bindString(27, ptime);
        }
        stmt.bindLong(28, entity.getIsFavorites() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, NewsSummary entity) {
        stmt.clearBindings();
 
        String postid = entity.getPostid();
        if (postid != null) {
            stmt.bindString(1, postid);
        }
        stmt.bindLong(2, entity.getHasCover() ? 1L: 0L);
        stmt.bindLong(3, entity.getHasHead());
        stmt.bindLong(4, entity.getReplyCount());
        stmt.bindLong(5, entity.getHasImg());
 
        String digest = entity.getDigest();
        if (digest != null) {
            stmt.bindString(6, digest);
        }
        stmt.bindLong(7, entity.getHasIcon() ? 1L: 0L);
 
        String docid = entity.getDocid();
        if (docid != null) {
            stmt.bindString(8, docid);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(9, title);
        }
 
        String ltitle = entity.getLtitle();
        if (ltitle != null) {
            stmt.bindString(10, ltitle);
        }
        stmt.bindLong(11, entity.getOrder());
        stmt.bindLong(12, entity.getPriority());
 
        String lmodify = entity.getLmodify();
        if (lmodify != null) {
            stmt.bindString(13, lmodify);
        }
 
        String boardid = entity.getBoardid();
        if (boardid != null) {
            stmt.bindString(14, boardid);
        }
 
        String photosetID = entity.getPhotosetID();
        if (photosetID != null) {
            stmt.bindString(15, photosetID);
        }
 
        String template = entity.getTemplate();
        if (template != null) {
            stmt.bindString(16, template);
        }
        stmt.bindLong(17, entity.getVotecount());
 
        String skipID = entity.getSkipID();
        if (skipID != null) {
            stmt.bindString(18, skipID);
        }
 
        String alias = entity.getAlias();
        if (alias != null) {
            stmt.bindString(19, alias);
        }
 
        String skipType = entity.getSkipType();
        if (skipType != null) {
            stmt.bindString(20, skipType);
        }
 
        String cid = entity.getCid();
        if (cid != null) {
            stmt.bindString(21, cid);
        }
        stmt.bindLong(22, entity.getHasAD());
 
        String source = entity.getSource();
        if (source != null) {
            stmt.bindString(23, source);
        }
 
        String ename = entity.getEname();
        if (ename != null) {
            stmt.bindString(24, ename);
        }
 
        String imgsrc = entity.getImgsrc();
        if (imgsrc != null) {
            stmt.bindString(25, imgsrc);
        }
 
        String tname = entity.getTname();
        if (tname != null) {
            stmt.bindString(26, tname);
        }
 
        String ptime = entity.getPtime();
        if (ptime != null) {
            stmt.bindString(27, ptime);
        }
        stmt.bindLong(28, entity.getIsFavorites() ? 1L: 0L);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public NewsSummary readEntity(Cursor cursor, int offset) {
        NewsSummary entity = new NewsSummary( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // postid
            cursor.getShort(offset + 1) != 0, // hasCover
            cursor.getInt(offset + 2), // hasHead
            cursor.getInt(offset + 3), // replyCount
            cursor.getInt(offset + 4), // hasImg
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // digest
            cursor.getShort(offset + 6) != 0, // hasIcon
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // docid
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // title
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // ltitle
            cursor.getInt(offset + 10), // order
            cursor.getInt(offset + 11), // priority
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // lmodify
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // boardid
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // photosetID
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // template
            cursor.getInt(offset + 16), // votecount
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // skipID
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // alias
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // skipType
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // cid
            cursor.getInt(offset + 21), // hasAD
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // source
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // ename
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // imgsrc
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // tname
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // ptime
            cursor.getShort(offset + 27) != 0 // isFavorites
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, NewsSummary entity, int offset) {
        entity.setPostid(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setHasCover(cursor.getShort(offset + 1) != 0);
        entity.setHasHead(cursor.getInt(offset + 2));
        entity.setReplyCount(cursor.getInt(offset + 3));
        entity.setHasImg(cursor.getInt(offset + 4));
        entity.setDigest(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setHasIcon(cursor.getShort(offset + 6) != 0);
        entity.setDocid(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setTitle(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setLtitle(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setOrder(cursor.getInt(offset + 10));
        entity.setPriority(cursor.getInt(offset + 11));
        entity.setLmodify(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setBoardid(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setPhotosetID(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setTemplate(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setVotecount(cursor.getInt(offset + 16));
        entity.setSkipID(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setAlias(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setSkipType(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setCid(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setHasAD(cursor.getInt(offset + 21));
        entity.setSource(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setEname(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setImgsrc(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setTname(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setPtime(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setIsFavorites(cursor.getShort(offset + 27) != 0);
     }
    
    @Override
    protected final String updateKeyAfterInsert(NewsSummary entity, long rowId) {
        return entity.getPostid();
    }
    
    @Override
    public String getKey(NewsSummary entity) {
        if(entity != null) {
            return entity.getPostid();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
